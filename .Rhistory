shp_alpha2=0.1,scl_alpha2=0.1,
mu_beta=0,sigma_beta=1,
mu_psi=0,sigma_psi=1,
mu_omega=0,
shp_sigma_omega = 1, scl_sigma_omega = 1
)
remove.packages("spnhppzi")
remove.packages("spnhppzi")
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
library("spnhppzi")
library(spnhppzi)
# ?spnhppzi::spsimrec
# ?spnhppzi::Recur
library(rstan)
library(Formula)
library(dplyr)
library(psych)
library(splitstackshape)
load(file="/home/alisson/UFMG/TESE/SIM/base1.RData")
#base1$IndRec<-1-base1$recurr
formula2=Formula(spnhppzi::Recur(end,status,ID,IndRec)~X1+X2|-1)
#formula2=Formula(NHPPZISP::Recur(stop,status,id,IndRec)~1|-1)
RESULT_BAYES_SCOV1<- spnhppzi::spnhppzi(formula2,
base1,
baseline = "plp1",
FR="TRUE",
ZI="TRUE",
approach = "BAYES",
initial=10,
tp_prior=1,
shp_alpha1=0.1,scl_alpha1=0.1,
shp_alpha2=0.1,scl_alpha2=0.1,
mu_beta=0,sigma_beta=1,
mu_psi=0,sigma_psi=1,
mu_omega=0,
shp_sigma_omega = 1, scl_sigma_omega = 1
)
remove.packages("spnhppzi")
# library("rstantools")
# rstan_create_package(path = '/home/alisson/spnhppzi')
# setwd("/home/alisson/spnhppzi")
# list.files(all.files = TRUE)
# file.show("DESCRIPTION")
# file.show("Read-and-delete-me")
# file.remove('Read-and-delete-me')
# file.show(file.path("R", "spnhppzi-package.R"))
example(source) # defines the sourceDir() function
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
library("spnhppzi")
library(spnhppzi)
# ?spnhppzi::spsimrec
# ?spnhppzi::Recur
library(rstan)
library(Formula)
library(dplyr)
library(psych)
library(splitstackshape)
load(file="/home/alisson/UFMG/TESE/SIM/base1.RData")
#base1$IndRec<-1-base1$recurr
formula2=Formula(spnhppzi::Recur(end,status,ID,IndRec)~X1+X2|-1)
#formula2=Formula(NHPPZISP::Recur(stop,status,id,IndRec)~1|-1)
RESULT_BAYES_SCOV1<- spnhppzi::spnhppzi(formula2,
base1,
baseline = "plp1",
FR="TRUE",
ZI="TRUE",
approach = "BAYES",
initial=10,
tp_prior=1,
shp_alpha1=0.1,scl_alpha1=0.1,
shp_alpha2=0.1,scl_alpha2=0.1,
mu_beta=0,sigma_beta=1,
mu_psi=0,sigma_psi=1,
mu_omega=0,
shp_sigma_omega = 1, scl_sigma_omega = 1
)
base1<-spnhppzi::spsimrec(
N=1000,
fu.min=5,
fu.max=5,
dist.x=c("binomial", "normal"),
par.x=list(0.5, c(0, 1)),
beta.x=c(0.6,0.8),
random.ef = 1,
tp_rnd_ef=0,
dist.z="lognormal",
#ent.dist.z=0,
mu.omega=0,
sigma.omega=1,
par.z = 1,
dist.rec="weibull",
par.rec=c(1,1.3),
cens.prob=0,
dfree=0,
pi=0.9,
logist=0
)
View(base1
View(as.data.frame(base1$tab1))
View(as.data.frame(base1$IND))
print(prop.table(table(as.vector(table(base1$tab1$tab$ID)))))
base1$tab1$tab$ID
base_teste<-base1$tab1$tab %>%
group_by(ID) %>%
summarise(frat=max(z),X1=max(X1),X2=max(X2), IndRec=max(IndRec),ngroup1=min(ngroup1))
dim(base_teste)
#colMeans(base1)
colMeans(base_teste)
hist(base_teste$frat,breaks=20)
#base1$IndRec<-1-base1$recurr
formula2=Formula(spnhppzi::Recur(end,status,ID,IndRec)~X1+X2|-1)
#formula2=Formula(NHPPZISP::Recur(stop,status,id,IndRec)~1|-1)
RESULT_BAYES_SCOV1<- spnhppzi::spnhppzi(formula2,
base1,
baseline = "plp1",
FR="TRUE",
ZI="TRUE",
approach = "BAYES",
initial=10,
tp_prior=1,
shp_alpha1=0.1,scl_alpha1=0.1,
shp_alpha2=0.1,scl_alpha2=0.1,
mu_beta=0,sigma_beta=1,
mu_psi=0,sigma_psi=1,
mu_omega=0,
shp_sigma_omega = 1, scl_sigma_omega = 1
)
pars<- as.data.frame(RESULT_BAYES_SCOV1, pars = c("alpha","beta","pii"))
colnames(pars)<-c("alpha1","alpha2","beta1","beta2","pi")
pars<-pars %>%
mutate(alpha1_1=1/alpha1)
pars_desc<-describe(pars,quant=c(.025,.5,.975),fast=TRUE)
pars_desc$step<-i
pars_desc_mod4.1<-rbind(pars_desc_mod4.1,pars_desc)
print(pars_desc)
save(pars_desc_mod4.1,file="/home/leste/Alisson/mod4_27_06.RData")
#save(pars_desc_mod4.1,file="/home/alisson/UFMG/TESE/SIM/pars_desc_mod4.1.RData")
}
View(base1)
rstan:::rstudio_stanc("inst/stan/NHPP_ZI_FRAT_04_07_2022.stan")
rstan:::rstudio_stanc("inst/stan/NHPP_ZI_FRAT_04_07_2022.stan")
rstan:::rstudio_stanc("inst/stan/NHPP_ZI_FRAT_04_07_2022.stan")
rstan:::rstudio_stanc("inst/stan/NHPP_ZI_FRAT_04_07_2022.stan")
rstan:::rstudio_stanc("inst/stan/NHPP_ZI_FRAT_04_07_2022.stan")
rstan:::rstudio_stanc("inst/stan/NHPP_ZI_FRAT_04_07_2022.stan")
#' @param status: evento ou censura
#' @param stop: tempo até ocorrência do evento
#' @param IndRec: Indicador se o indivíduo apresenta uma ou mais recorrência
#' @param covar: Covariável
#' @param initial: Valores de incialização dos parâmetros
#' @param approach: abordagem a ser considerada (0 - frequentista, 1 - bayesiana)
#' @param frag:  uso de fragilidade (0 - sem fragilidade, 1 - com fragilidade)
#@tpfrag: tipo de fragilidade (0-rho(t) = rho0(t)*exp(X*beta + w), 1 - rho(t) = rho0(t)*Z*exp(X*beta))
#' @export
######################################################################################################
spnhppzi<-function(formula,
data,
baseline = c("plp1", "plp2"),
approach = c("mle", "bayes"),
n_iter=4000,
ZI = c("true","false"),
FR= c("true","false"),
initial,
tp_prior=0,frag=0,mu_omega=0,
sigma_omega=0,
shp_sigma_omega=0, scl_sigma_omega=0,
shp_alpha1=0,scl_alpha1=0,shp_alpha2=0,scl_alpha2=0,
mu_beta=0,sigma_beta=10,
mu_psi=0,sigma_psi=10){
formula <- Formula::Formula(formula)
approach <- tolower(approach)
approach <- match.arg(approach)
baseline <- tolower(baseline)
baseline <- match.arg(baseline)
ZI <- tolower(ZI)
ZI <- match.arg(ZI)
FR <- tolower(FR)
FR <- match.arg(FR)
mf <- stats::model.frame(formula=formula, data=data)
Terms <- stats::terms(mf)
resp <- stats::model.response(mf)
#print(head(resp))
X <- stats::model.matrix(formula, data = mf, rhs = 1)[,-1, drop = FALSE]
Z <- stats::model.matrix(formula, data = mf, rhs = 2)#[,-1, drop = FALSE]
time <- resp[,1]
event <- resp[,2]
id <- resp[,3]
IndRec<- resp[,4]
data1<-as.data.frame(cbind(time,event,id,IndRec,X)) %>%
group_by(id) %>%
summarise(across(everything(), last,.names = "max_{.col}"))
data2<-as.data.frame(cbind(time,event,id,IndRec,Z)) %>%
group_by(id) %>%
summarise(across(everything(), last,.names = "max_{.col}"))
n_ind1<-as.data.frame(cbind(event,id)) %>%
group_by(id) %>%
summarise(n_ind1=sum(event)) %>%
select("n_ind1")
n_ind1<-as.vector(unlist(n_ind1))
# print(head(n_ind1,n=200))
# print(max(n_ind1))
position_ind<-as.data.frame(id) %>%
group_by(id) %>%
summarise(n_ind=n()) %>%
mutate(end_ind=cumsum(n_ind), begin_ind=end_ind-n_ind+1) %>%
select(n_ind,begin_ind,end_ind)
n_ind<-as.vector(unlist(position_ind$n_ind))
begin_ind<-as.vector(unlist(position_ind$begin_ind))
end_ind<-as.vector(unlist(position_ind$end_ind))
# print(head(n_ind))
# n_ind1<-as.data.frame(id) %>%
#   group_by(id) %>%
#   summarise(n_ind1=sum(event)) %>%
#   select(n_ind1)
# n_ind1<-as.vector(unlist(n_ind1))
# print(head(n_ind1))
max_stop <- as.vector(unlist(data1[,2]))
IndRec2<- as.vector(unlist(data1[,4]))
N <- length(time)
n <- length(max_stop)
# print(length(max_stop))
p <- ncol(X)
q <- ncol(Z)
print(q)
#print(p)
#print(q)
if(p==0){
X <- array(0, dim = c(0, 0))
Xy <- array(0, dim = c(0, 0))
}else{
Xy<-as.matrix((data1[,-(1:4)] ))
}
#print(head(X))
#print(head(Xy))
if(q==0){
Z <- array(0, dim = c(0, 0))
Z1 <- array(0, dim = c(0, 0))
}else{
Z1<-as.matrix((data2[,-(1:4)] ))
}
#print(head(Z))
# print(head(Z1,n=20L))
baseline <- switch(baseline,
"plp" = 0,
"plp1" = 1
)
if(baseline == 0){
m <- 2
}
if(baseline == 1){
m <- 2
}
approach <- switch(approach,
"mle" = 0,
"bayes" = 1
)
FR <- switch(FR,
"true" = 1,
"false" = 0
)
ZI <- switch(ZI,
"true" = 1,
"false" = 0
)
data_model <- list(id=id,evento=event,time=time, X=X, Z=Z, N=N, Xy=Xy, Z1=Z1,
max_stop=max_stop, n=n, p=p, q=q, IndR=IndRec, IndRec2=IndRec2, approach=approach, FR=FR, ZI=ZI,
begin_ind=begin_ind,end_ind=end_ind,
n_ind=n_ind,n_ind1=n_ind1, m=m, mu_omega=mu_omega,shp_sigma_omega=shp_sigma_omega, scl_sigma_omega=scl_sigma_omega,
sigma_omega=sigma_omega,
shp_alpha1=shp_alpha1,
scl_alpha1=scl_alpha1, shp_alpha2=shp_alpha2, scl_alpha2=scl_alpha2,mu_beta=mu_beta,
sigma_beta=sigma_beta,mu_psi=mu_psi,
sigma_psi=sigma_psi, tp_hf=baseline, tp_prior=tp_prior)
if(FR==0){
if(ZI==0){
#mod <- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/3.6/NHPPZISP/stan/NHPP_COV_4.stan")
#
# mod <- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/4.2/NHPPZISP/stan/NHPP_COV_4.stan")
#mod <- rstan::stan_model("/usr/local/lib/R/site-library/NHPPZISP/stan/NHPP_COV_4.stan")
mod <- stanmodels$NHPP_COV_4
}
else{
if(q==0){
#mod <- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/3.6/NHPPZISP/stan/NHPP_ZI_1_08_03_2022.stan")
#
#mod<- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/4.2/NHPPZISP/stan/NHPP_ZI_1_08_03_2022.stan")
#mod<- rstan::stan_model("/usr/local/lib/R/site-library/NHPPZISP/stan/NHPP_ZI_1_08_03_2022.stan")
# mod<- stanmodels$NHPP_ZI_1_08_03_2022
mod<- rstan::stan_model("/home/alisson/R/x86_64-pc-linux-gnu-library/4.2/spnhppzi/stan/NHPP_ZI_03_07_2022.stan")
}
else{
#mod <- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/3.6/NHPPZISP/stan/NHPP_ZI_LOGISTCOV_09_03_2022.stan")
#
#mod<- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/4.2/NHPPZISP/stan/NHPP_ZI_LOGISTCOV_09_03_2022.stan")
#mod<- rstan::stan_model("/usr/local/lib/R/site-library/NHPPZISP/stan/NHPP_ZI_LOGISTCOV_09_03_2022.stan")
mod<- stanmodels$NHPP_ZI_LOGISTCOV_09_03_2022
}
}
}
else {
if(ZI==0){
# mod <- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/3.6/NHPPZISP/stan/NHPP_COV_FRAT_10.stan")
#
#mod <- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/4.2/NHPPZISP/stan/NHPP_COV_FRAT_10.stan")
#mod<- rstan::stan_model("/usr/local/lib/R/site-library/NHPPZISP/stan/NHPP_COV_FRAT_10.stan")
mod <- stanmodels$NHPP_COV_FRAT_10
}
else{
if(q==0){
# mod <- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/3.6/NHPPZISP/stan/NHPP_ZI_FRAT_09_03_2022.stan")
#
#mod<- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/4.2/NHPPZISP/stan/NHPP_ZI_FRAT_09_03_2022.stan")
# mod<- rstan::stan_model("/usr/local/lib/R/site-library/NHPPZISP/stan/NHPP_ZI_FRAT_09_03_2022.stan")
mod<- stanmodels$NHPP_ZI_FRAT_09_03_2022
# mod<- rstan::stan_model("/home/alisson/R/x86_64-pc-linux-gnu-library/4.2/spnhppzi/stan/NHPP_ZI_FRAT_04_07_2022.stan")
}
else{
#mod <- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/3.6/NHPPZISP/stan/NHPP_ZI_LOGISTCOV_FRAT_16_03_2022.stan")
#
#mod<- rstan::stan_model("~/R/x86_64-pc-linux-gnu-library/4.2/NHPPZISP/stan/NHPP_ZI_LOGISTCOV_FRAT_16_03_2022.stan")
#mod<- rstan::stan_model("/usr/local/lib/R/site-library/NHPPZISP/stan/NHPP_ZI_LOGISTCOV_FRAT_16_03_2022.stan")
mod<- stanmodels$NHPP_ZI_LOGISTCOV_FRAT_16_03_2022
}
}
}
if(FR==0){
#Optimizing
if(approach==0){
result<- optimizing(stanmodels$mod, data = data_model, hessian =TRUE, init=initial, algorithm = "LBFGS")
return(result)
}
if(approach==1){
#result_b<- sampling(mod, data = data_model, cores = 4, iter=4000)
result_b<- sampling(mod, data = data_model, cores = 4, iter=n_iter)
# result_b<- sampling(mod, data = data_model, cores = 4, iter=4000,  control = list(max_treedepth = 50,adapt_delta = 0.999))
return(result_b)
}
}
else{
#result_c<- sampling(mod, data = data_model, cores = 4, iter=4000)
result_c<- sampling(mod, data = data_model, cores = 4, iter=n_iter)
#result_c<- sampling(mod, data = data_model, cores = 4, iter=4000, control = list(max_treedepth = 50,adapt_delta = 0.999))
return(result_c)
}
}
load(file="/home/alisson/UFMG/TESE/SIM/base1.RData")
#base1$IndRec<-1-base1$recurr
formula2=Formula(spnhppzi::Recur(end,status,ID,IndRec)~X1+X2|-1)
#formula2=Formula(NHPPZISP::Recur(stop,status,id,IndRec)~1|-1)
RESULT_BAYES_SCOV1<- spnhppzi(formula2,
base1,
baseline = "plp1",
FR="TRUE",
ZI="TRUE",
approach = "BAYES",
initial=10,
tp_prior=1,
shp_alpha1=0.1,scl_alpha1=0.1,
shp_alpha2=0.1,scl_alpha2=0.1,
mu_beta=0,sigma_beta=1,
mu_psi=0,sigma_psi=1,
mu_omega=0,
shp_sigma_omega = 1, scl_sigma_omega = 1
)
remove.packages("spnhppzi")
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
library("spnhppzi")
remove.packages("spnhppzi")
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
library("spnhppzi")
library(spnhppzi)
# ?spnhppzi::spsimrec
# ?spnhppzi::Recur
library(rstan)
library(Formula)
library(dplyr)
library(psych)
library(splitstackshape)
#base1$IndRec<-1-base1$recurr
formula2=Formula(spnhppzi::Recur(end,status,ID,IndRec)~X1+X2|-1)
load(file="/home/alisson/UFMG/TESE/SIM/base1.RData")
#formula2=Formula(NHPPZISP::Recur(stop,status,id,IndRec)~1|-1)
RESULT_BAYES_SCOV1<- spnhppzi::spnhppzi(formula2,
base1,
baseline = "plp1",
FR="TRUE",
ZI="TRUE",
approach = "BAYES",
initial=10,
tp_prior=1,
shp_alpha1=0.1,scl_alpha1=0.1,
shp_alpha2=0.1,scl_alpha2=0.1,
mu_beta=0,sigma_beta=1,
mu_psi=0,sigma_psi=1,
mu_omega=0,
shp_sigma_omega = 1, scl_sigma_omega = 1
)
#formula2=Formula(NHPPZISP::Recur(stop,status,id,IndRec)~1|-1)
RESULT_BAYES_SCOV1<- spnhppzi::spnhppzi(formula2,
base1,
baseline = "plp1",
FR="TRUE",
ZI="TRUE",
approach = "BAYES",
initial=10,
tp_prior=1,
shp_alpha1=0.1,scl_alpha1=0.1,
shp_alpha2=0.1,scl_alpha2=0.1,
mu_beta=0,sigma_beta=1,
mu_psi=0,sigma_psi=1,
mu_omega=0,
shp_sigma_omega = 1, scl_sigma_omega = 1
)
pars<- as.data.frame(RESULT_BAYES_SCOV1, pars = c("alpha","beta","pii"))
colnames(pars)<-c("alpha1","alpha2","beta1","beta2","pi")
pars<-pars %>%
mutate(alpha1_1=1/alpha1)
pars_desc<-describe(pars,quant=c(.025,.5,.975),fast=TRUE)
print(pars_desc)
base1<-spnhppzi::spsimrec(
N=1000,
fu.min=5,
fu.max=5,
dist.x=c("binomial", "normal"),
par.x=list(0.5, c(0, 1)),
beta.x=c(0.6,0.8),
random.ef = 1,
tp_rnd_ef=0,
dist.z="lognormal",
#ent.dist.z=0,
mu.omega=0,
sigma.omega=1,
par.z = 1,
dist.rec="weibull",
par.rec=c(1,1.3),
cens.prob=0,
dfree=0,
pi=0.9,
logist=0
)
base_teste<-base1$tab1$tab %>%
group_by(ID) %>%
summarise(frat=max(z),X1=max(X1),X2=max(X2), IndRec=max(IndRec),ngroup1=min(ngroup1))
base_teste<-base1 %>%
group_by(ID) %>%
summarise(frat=max(z),X1=max(X1),X2=max(X2), IndRec=max(IndRec),ngroup1=min(ngroup1))
dim(base_teste)
#colMeans(base1)
colMeans(base_teste)
hist(base_teste$frat,breaks=20)
1/(0.9^(1/1.3))
1/1.3
1/(0.95^(1/1.3))
1/(0.98^(1/1.3))
1/(1.2^(1/1.3))
1/(0.8^(1/1.3))
1/1.1
1/(1.03^(1/1.3))
1/1.03
rstan:::rstudio_stanc("inst/stan/chunks/mylib.stan")
install.packages(c("broom", "DBI", "dbplyr", "e1071", "globals", "hardhat", "ipred", "parallelly", "pkgload", "processx", "progressr", "proxy", "ps", "ranger", "recipes", "rlang", "tinytex"))
install.packages(c("broom", "DBI", "dbplyr", "e1071", "globals", "hardhat", "ipred", "parallelly", "pkgload", "processx", "progressr", "proxy", "ps", "ranger", "recipes", "rlang", "tinytex"))
install.packages(c("broom", "DBI", "dbplyr", "e1071", "globals", "hardhat", "ipred", "parallelly", "pkgload", "processx", "progressr", "proxy", "ps", "ranger", "recipes", "rlang", "tinytex"))
install.packages(c("broom", "DBI", "dbplyr", "e1071", "globals", "hardhat", "ipred", "parallelly", "pkgload", "processx", "progressr", "proxy", "ps", "ranger", "recipes", "rlang", "tinytex"))
remove.packages("spnhppzi")
# library("rstantools")
# rstan_create_package(path = '/home/alisson/spnhppzi')
# setwd("/home/alisson/spnhppzi")
# list.files(all.files = TRUE)
# file.show("DESCRIPTION")
# file.show("Read-and-delete-me")
# file.remove('Read-and-delete-me')
# file.show(file.path("R", "spnhppzi-package.R"))
example(source) # defines the sourceDir() function
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
rstan:::rstudio_stanc("inst/stan/NHPP_COV_4.stan")
rstan:::rstudio_stanc("inst/stan/NHPP_COV_4.stan")
remove.packages("spnhppzi")
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
library("spnhppzi")
remove.packages("spnhppzi")
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
remove.packages("spnhppzi")
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
library("spnhppzi")
remove.packages("spnhppzi")
remove.packages("spnhppzi")
remove.packages("spnhppzi")
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
library("spnhppzi")
remove.packages("spnhppzi")
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
remove.packages("spnhppzi")
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
library("spnhppzi")
remove.packages("spnhppzi")
roxygen2::roxygenize()
install.packages("../spnhppzi", repos = NULL, type = "source")
