// Generated by rstantools.  Do not edit by hand.

/*
    spnhppzi is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    spnhppzi is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with spnhppzi.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_NHPP_ZI_FRAT_06_07_2022_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_NHPP_ZI_FRAT_06_07_2022");
    reader.add_event(0, 0, "include", "/chunks/mylib.stan");
    reader.add_event(0, 0, "start", "/chunks/mylib.stan");
    reader.add_event(22, 22, "end", "/chunks/mylib.stan");
    reader.add_event(22, 1, "restart", "model_NHPP_ZI_FRAT_06_07_2022");
    reader.add_event(147, 124, "end", "model_NHPP_ZI_FRAT_06_07_2022");
    return reader;
}
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
Lambda_plp2(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& max_stop,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& alpha,
                const int& n, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("lprob", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lprob(n);
        stan::math::initialize(lprob, DUMMY_VAR__);
        stan::math::fill(lprob, DUMMY_VAR__);
        current_statement_begin__ = 5;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 7;
            stan::model::assign(lprob, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        -(stan::math::exp((stan::math::log(get_base1(alpha, 1, "alpha", 1)) + multiply_log(get_base1(alpha, 2, "alpha", 1), get_base1(max_stop, i, "max_stop", 1))))), 
                        "assigning variable lprob");
        }
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lprob);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct Lambda_plp2_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& max_stop,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& alpha,
                const int& n, std::ostream* pstream__) const {
        return Lambda_plp2(max_stop, alpha, n, pstream__);
    }
};
template <typename T0__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
lambda_plp2(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& time,
                const int& N,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 12;
        validate_non_negative_index("lprob1", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lprob1(N);
        stan::math::initialize(lprob1, DUMMY_VAR__);
        stan::math::fill(lprob1, DUMMY_VAR__);
        current_statement_begin__ = 13;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 17;
            stan::model::assign(lprob1, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        ((stan::math::log(get_base1(alpha, 1, "alpha", 1)) + stan::math::log(get_base1(alpha, 2, "alpha", 1))) + multiply_log((get_base1(alpha, 2, "alpha", 1) - 1), get_base1(time, i, "time", 1))), 
                        "assigning variable lprob1");
        }
        current_statement_begin__ = 20;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lprob1);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lambda_plp2_functor__ {
    template <typename T0__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& time,
                const int& N,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& alpha, std::ostream* pstream__) const {
        return lambda_plp2(time, N, alpha, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_NHPP_ZI_FRAT_06_07_2022
  : public stan::model::model_base_crtp<model_NHPP_ZI_FRAT_06_07_2022> {
private:
        int N;
        int p;
        int n;
        int tp_hf;
        int m;
        std::vector<int> id;
        std::vector<int> n_ind;
        std::vector<int> begin_ind;
        std::vector<int> end_ind;
        vector_d event;
        vector_d max_stop;
        vector_d time;
        matrix_d X;
        matrix_d Xy;
        vector_d IndRec2;
        int approach;
        int ZI;
        double shp_alpha1;
        double scl_alpha1;
        double shp_alpha2;
        double scl_alpha2;
        double mu_omega;
        double shp_sigma_omega;
        double scl_sigma_omega;
        double mu_beta;
        double sigma_beta;
        int tp_prior;
public:
    model_NHPP_ZI_FRAT_06_07_2022(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_NHPP_ZI_FRAT_06_07_2022(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_NHPP_ZI_FRAT_06_07_2022_namespace::model_NHPP_ZI_FRAT_06_07_2022";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 0);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "tp_hf", "int", context__.to_vec());
            tp_hf = int(0);
            vals_i__ = context__.vals_i("tp_hf");
            pos__ = 0;
            tp_hf = vals_i__[pos__++];
            check_greater_or_equal(function__, "tp_hf", tp_hf, 0);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            current_statement_begin__ = 29;
            validate_non_negative_index("id", "N", N);
            context__.validate_dims("data initialization", "id", "int", context__.to_vec(N));
            id = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("id");
            pos__ = 0;
            size_t id_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < id_k_0_max__; ++k_0__) {
                id[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("n_ind", "n", n);
            context__.validate_dims("data initialization", "n_ind", "int", context__.to_vec(n));
            n_ind = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("n_ind");
            pos__ = 0;
            size_t n_ind_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < n_ind_k_0_max__; ++k_0__) {
                n_ind[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("begin_ind", "n", n);
            context__.validate_dims("data initialization", "begin_ind", "int", context__.to_vec(n));
            begin_ind = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("begin_ind");
            pos__ = 0;
            size_t begin_ind_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < begin_ind_k_0_max__; ++k_0__) {
                begin_ind[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("end_ind", "n", n);
            context__.validate_dims("data initialization", "end_ind", "int", context__.to_vec(n));
            end_ind = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("end_ind");
            pos__ = 0;
            size_t end_ind_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < end_ind_k_0_max__; ++k_0__) {
                end_ind[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("event", "N", N);
            context__.validate_dims("data initialization", "event", "vector_d", context__.to_vec(N));
            event = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("event");
            pos__ = 0;
            size_t event_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < event_j_1_max__; ++j_1__) {
                event(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 34;
            validate_non_negative_index("max_stop", "n", n);
            context__.validate_dims("data initialization", "max_stop", "vector_d", context__.to_vec(n));
            max_stop = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("max_stop");
            pos__ = 0;
            size_t max_stop_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < max_stop_j_1_max__; ++j_1__) {
                max_stop(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 35;
            validate_non_negative_index("time", "N", N);
            context__.validate_dims("data initialization", "time", "vector_d", context__.to_vec(N));
            time = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < time_j_1_max__; ++j_1__) {
                time(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("X", "(logical_eq(p, 0) ? 0 : N )", (logical_eq(p, 0) ? 0 : N ));
            validate_non_negative_index("X", "p", p);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec((logical_eq(p, 0) ? 0 : N ),p));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((logical_eq(p, 0) ? 0 : N ), p);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = p;
            size_t X_j_1_max__ = (logical_eq(p, 0) ? 0 : N );
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("Xy", "(logical_eq(p, 0) ? 0 : n )", (logical_eq(p, 0) ? 0 : n ));
            validate_non_negative_index("Xy", "p", p);
            context__.validate_dims("data initialization", "Xy", "matrix_d", context__.to_vec((logical_eq(p, 0) ? 0 : n ),p));
            Xy = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((logical_eq(p, 0) ? 0 : n ), p);
            vals_r__ = context__.vals_r("Xy");
            pos__ = 0;
            size_t Xy_j_2_max__ = p;
            size_t Xy_j_1_max__ = (logical_eq(p, 0) ? 0 : n );
            for (size_t j_2__ = 0; j_2__ < Xy_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Xy_j_1_max__; ++j_1__) {
                    Xy(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 38;
            validate_non_negative_index("IndRec2", "n", n);
            context__.validate_dims("data initialization", "IndRec2", "vector_d", context__.to_vec(n));
            IndRec2 = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("IndRec2");
            pos__ = 0;
            size_t IndRec2_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < IndRec2_j_1_max__; ++j_1__) {
                IndRec2(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "approach", "int", context__.to_vec());
            approach = int(0);
            vals_i__ = context__.vals_i("approach");
            pos__ = 0;
            approach = vals_i__[pos__++];
            check_greater_or_equal(function__, "approach", approach, 0);
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "ZI", "int", context__.to_vec());
            ZI = int(0);
            vals_i__ = context__.vals_i("ZI");
            pos__ = 0;
            ZI = vals_i__[pos__++];
            check_greater_or_equal(function__, "ZI", ZI, 0);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "shp_alpha1", "double", context__.to_vec());
            shp_alpha1 = double(0);
            vals_r__ = context__.vals_r("shp_alpha1");
            pos__ = 0;
            shp_alpha1 = vals_r__[pos__++];
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "scl_alpha1", "double", context__.to_vec());
            scl_alpha1 = double(0);
            vals_r__ = context__.vals_r("scl_alpha1");
            pos__ = 0;
            scl_alpha1 = vals_r__[pos__++];
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "shp_alpha2", "double", context__.to_vec());
            shp_alpha2 = double(0);
            vals_r__ = context__.vals_r("shp_alpha2");
            pos__ = 0;
            shp_alpha2 = vals_r__[pos__++];
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "scl_alpha2", "double", context__.to_vec());
            scl_alpha2 = double(0);
            vals_r__ = context__.vals_r("scl_alpha2");
            pos__ = 0;
            scl_alpha2 = vals_r__[pos__++];
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "mu_omega", "double", context__.to_vec());
            mu_omega = double(0);
            vals_r__ = context__.vals_r("mu_omega");
            pos__ = 0;
            mu_omega = vals_r__[pos__++];
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "shp_sigma_omega", "double", context__.to_vec());
            shp_sigma_omega = double(0);
            vals_r__ = context__.vals_r("shp_sigma_omega");
            pos__ = 0;
            shp_sigma_omega = vals_r__[pos__++];
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "scl_sigma_omega", "double", context__.to_vec());
            scl_sigma_omega = double(0);
            vals_r__ = context__.vals_r("scl_sigma_omega");
            pos__ = 0;
            scl_sigma_omega = vals_r__[pos__++];
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "mu_beta", "double", context__.to_vec());
            mu_beta = double(0);
            vals_r__ = context__.vals_r("mu_beta");
            pos__ = 0;
            mu_beta = vals_r__[pos__++];
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "sigma_beta", "double", context__.to_vec());
            sigma_beta = double(0);
            vals_r__ = context__.vals_r("sigma_beta");
            pos__ = 0;
            sigma_beta = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_beta", sigma_beta, 0);
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "tp_prior", "int", context__.to_vec());
            tp_prior = int(0);
            vals_i__ = context__.vals_i("tp_prior");
            pos__ = 0;
            tp_prior = vals_i__[pos__++];
            check_greater_or_equal(function__, "tp_prior", tp_prior, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 55;
            validate_non_negative_index("alpha", "m", m);
            num_params_r__ += m;
            current_statement_begin__ = 56;
            validate_non_negative_index("beta", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 57;
            validate_non_negative_index("pii", "(logical_eq(ZI, 0) ? 0 : 1 )", (logical_eq(ZI, 0) ? 0 : 1 ));
            num_params_r__ += (1 * (logical_eq(ZI, 0) ? 0 : 1 ));
            current_statement_begin__ = 58;
            validate_non_negative_index("omega", "n", n);
            num_params_r__ += n;
            current_statement_begin__ = 59;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_NHPP_ZI_FRAT_06_07_2022() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 55;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "m", m);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(m));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(m);
        size_t alpha_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "p", p);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(p);
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("pii")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pii missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pii");
        pos__ = 0U;
        validate_non_negative_index("pii", "(logical_eq(ZI, 0) ? 0 : 1 )", (logical_eq(ZI, 0) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "pii", "double", context__.to_vec((logical_eq(ZI, 0) ? 0 : 1 )));
        std::vector<double> pii((logical_eq(ZI, 0) ? 0 : 1 ), double(0));
        size_t pii_k_0_max__ = (logical_eq(ZI, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < pii_k_0_max__; ++k_0__) {
            pii[k_0__] = vals_r__[pos__++];
        }
        size_t pii_i_0_max__ = (logical_eq(ZI, 0) ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < pii_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, pii[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pii: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 58;
        if (!(context__.contains_r("omega")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable omega missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("omega");
        pos__ = 0U;
        validate_non_negative_index("omega", "n", n);
        context__.validate_dims("parameter initialization", "omega", "vector_d", context__.to_vec(n));
        Eigen::Matrix<double, Eigen::Dynamic, 1> omega(n);
        size_t omega_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            omega(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, omega);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable omega: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("sigma_omega")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_omega missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_omega");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_omega", "double", context__.to_vec());
        double sigma_omega(0);
        sigma_omega = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_omega);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_omega: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 55;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_lb_constrain(0, m, lp__);
            else
                alpha = in__.vector_lb_constrain(0, m);
            current_statement_begin__ = 56;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(p, lp__);
            else
                beta = in__.vector_constrain(p);
            current_statement_begin__ = 57;
            std::vector<local_scalar_t__> pii;
            size_t pii_d_0_max__ = (logical_eq(ZI, 0) ? 0 : 1 );
            pii.reserve(pii_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < pii_d_0_max__; ++d_0__) {
                if (jacobian__)
                    pii.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    pii.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 58;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> omega;
            (void) omega;  // dummy to suppress unused var warning
            if (jacobian__)
                omega = in__.vector_lb_constrain(0, n, lp__);
            else
                omega = in__.vector_lb_constrain(0, n);
            current_statement_begin__ = 59;
            local_scalar_t__ sigma_omega;
            (void) sigma_omega;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_omega = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_omega = in__.scalar_lb_constrain(0);
            // model body
            {
            current_statement_begin__ = 66;
            validate_non_negative_index("Lambda0", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Lambda0(n);
            stan::math::initialize(Lambda0, DUMMY_VAR__);
            stan::math::fill(Lambda0, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("log_lambda0", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_lambda0(N);
            stan::math::initialize(log_lambda0, DUMMY_VAR__);
            stan::math::fill(log_lambda0, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("log_lambda0_event", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_lambda0_event(N);
            stan::math::initialize(log_lambda0_event, DUMMY_VAR__);
            stan::math::fill(log_lambda0_event, DUMMY_VAR__);
            current_statement_begin__ = 69;
            validate_non_negative_index("eta", "(logical_eq(p, 0) ? 0 : N )", (logical_eq(p, 0) ? 0 : N ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta((logical_eq(p, 0) ? 0 : N ));
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 70;
            validate_non_negative_index("eta_event", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_event(N);
            stan::math::initialize(eta_event, DUMMY_VAR__);
            stan::math::fill(eta_event, DUMMY_VAR__);
            current_statement_begin__ = 71;
            validate_non_negative_index("exp_etay", "(logical_eq(p, 0) ? 0 : n )", (logical_eq(p, 0) ? 0 : n ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> exp_etay((logical_eq(p, 0) ? 0 : n ));
            stan::math::initialize(exp_etay, DUMMY_VAR__);
            stan::math::fill(exp_etay, DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("sum_log_lambda0", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sum_log_lambda0(n);
            stan::math::initialize(sum_log_lambda0, DUMMY_VAR__);
            stan::math::fill(sum_log_lambda0, DUMMY_VAR__);
            stan::math::assign(sum_log_lambda0,rep_vector(0, n));
            current_statement_begin__ = 73;
            validate_non_negative_index("sum_eta", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sum_eta(n);
            stan::math::initialize(sum_eta, DUMMY_VAR__);
            stan::math::fill(sum_eta, DUMMY_VAR__);
            stan::math::assign(sum_eta,rep_vector(0, n));
            current_statement_begin__ = 74;
            int a(0);
            (void) a;  // dummy to suppress unused var warning
            stan::math::fill(a, std::numeric_limits<int>::min());
            stan::math::assign(a,0);
            current_statement_begin__ = 75;
            int c(0);
            (void) c;  // dummy to suppress unused var warning
            stan::math::fill(c, std::numeric_limits<int>::min());
            stan::math::assign(c,0);
            current_statement_begin__ = 77;
            if (as_bool(logical_gt(p, 0))) {
                current_statement_begin__ = 78;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 79;
                    stan::model::assign(eta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), beta) + stan::math::log(get_base1(omega, get_base1(id, i, "id", 1), "omega", 1))), 
                                "assigning variable eta");
                    current_statement_begin__ = 80;
                    stan::model::assign(eta_event, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(event, i, "event", 1) * get_base1(eta, i, "eta", 1)), 
                                "assigning variable eta_event");
                }
                current_statement_begin__ = 82;
                stan::math::assign(exp_etay, elt_multiply(omega, stan::math::exp(multiply(Xy, beta))));
            }
            current_statement_begin__ = 85;
            stan::math::assign(Lambda0, Lambda_plp2(max_stop, alpha, n, pstream__));
            current_statement_begin__ = 86;
            stan::math::assign(log_lambda0, lambda_plp2(time, N, alpha, pstream__));
            current_statement_begin__ = 87;
            stan::math::assign(log_lambda0_event, elt_multiply(event, log_lambda0));
            current_statement_begin__ = 97;
            if (as_bool(logical_eq(p, 0))) {
                current_statement_begin__ = 98;
                for (int i = 1; i <= n; ++i) {
                    current_statement_begin__ = 100;
                    if (as_bool(logical_eq(get_base1(IndRec2, i, "IndRec2", 1), 0))) {
                        current_statement_begin__ = 101;
                        lp_accum__.add(log_sum_exp(bernoulli_log(1, pii), (get_base1(Lambda0, i, "Lambda0", 1) + bernoulli_log(0, pii))));
                    } else {
                        current_statement_begin__ = 105;
                        lp_accum__.add(((bernoulli_log(0, pii) + get_base1(Lambda0, i, "Lambda0", 1)) + sum(stan::model::rvalue(log_lambda0_event, stan::model::cons_list(stan::model::index_min_max(get_base1(begin_ind, i, "begin_ind", 1), get_base1(end_ind, i, "end_ind", 1)), stan::model::nil_index_list()), "log_lambda0_event"))));
                    }
                }
            } else {
                current_statement_begin__ = 111;
                for (int i = 1; i <= n; ++i) {
                    current_statement_begin__ = 112;
                    if (as_bool(logical_eq(get_base1(IndRec2, i, "IndRec2", 1), 0))) {
                        current_statement_begin__ = 113;
                        lp_accum__.add(log_sum_exp(bernoulli_log(1, pii), ((get_base1(Lambda0, i, "Lambda0", 1) * get_base1(exp_etay, i, "exp_etay", 1)) + bernoulli_log(0, pii))));
                    } else {
                        current_statement_begin__ = 117;
                        lp_accum__.add((((bernoulli_log(0, pii) + (get_base1(Lambda0, i, "Lambda0", 1) * get_base1(exp_etay, i, "exp_etay", 1))) + sum(stan::model::rvalue(log_lambda0_event, stan::model::cons_list(stan::model::index_min_max(get_base1(begin_ind, i, "begin_ind", 1), get_base1(end_ind, i, "end_ind", 1)), stan::model::nil_index_list()), "log_lambda0_event"))) + sum(stan::model::rvalue(eta_event, stan::model::cons_list(stan::model::index_min_max(get_base1(begin_ind, i, "begin_ind", 1), get_base1(end_ind, i, "end_ind", 1)), stan::model::nil_index_list()), "eta_event"))));
                    }
                }
            }
            current_statement_begin__ = 136;
            if (as_bool((primitive_value(logical_eq(approach, 1)) && primitive_value(logical_eq(tp_prior, 1))))) {
                current_statement_begin__ = 137;
                lp_accum__.add(gamma_log<propto__>(get_base1(alpha, 1, "alpha", 1), shp_alpha1, scl_alpha1));
                current_statement_begin__ = 138;
                lp_accum__.add(gamma_log<propto__>(get_base1(alpha, 2, "alpha", 1), shp_alpha2, scl_alpha2));
                current_statement_begin__ = 139;
                lp_accum__.add(normal_log<propto__>(beta, mu_beta, sigma_beta));
                current_statement_begin__ = 140;
                lp_accum__.add(gamma_log<propto__>(sigma_omega, shp_sigma_omega, scl_sigma_omega));
                current_statement_begin__ = 141;
                lp_accum__.add(gamma_log<propto__>(omega, sigma_omega, sigma_omega));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("pii");
        names__.push_back("omega");
        names__.push_back("sigma_omega");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(ZI, 0) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_NHPP_ZI_FRAT_06_07_2022_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_lb_constrain(0, m);
        size_t alpha_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(p);
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        std::vector<double> pii;
        size_t pii_d_0_max__ = (logical_eq(ZI, 0) ? 0 : 1 );
        pii.reserve(pii_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < pii_d_0_max__; ++d_0__) {
            pii.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t pii_k_0_max__ = (logical_eq(ZI, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < pii_k_0_max__; ++k_0__) {
            vars__.push_back(pii[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> omega = in__.vector_lb_constrain(0, n);
        size_t omega_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            vars__.push_back(omega(j_1__));
        }
        double sigma_omega = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_omega);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_NHPP_ZI_FRAT_06_07_2022";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pii_k_0_max__ = (logical_eq(ZI, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < pii_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pii" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t omega_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "omega" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_omega";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pii_k_0_max__ = (logical_eq(ZI, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < pii_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pii" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t omega_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "omega" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_omega";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_NHPP_ZI_FRAT_06_07_2022_namespace::model_NHPP_ZI_FRAT_06_07_2022 stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
