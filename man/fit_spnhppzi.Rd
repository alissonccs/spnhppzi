% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_spnhppzi.R
\name{fit_spnhppzi}
\alias{fit_spnhppzi}
\title{spnhppzi: Hierarchical Models for Recurrent Event Data with Zero Inflation and Spatial Correlation}
\usage{
fit_spnhppzi(
  formula,
  data,
  baseline = c("plp", "bp"),
  approach = c("mle", "bayes"),
  n_iter = 4000,
  n_cores = 1,
  n_chains = 4,
  ZI = c("true", "false"),
  rnd_efc = c("true", "false"),
  initial,
  shp_alpha1 = 0.1,
  scl_alpha1 = 0.1,
  shp_alpha2 = 0.1,
  scl_alpha2 = 0.1,
  mu_beta = 0,
  sigma_beta = 4,
  mu_psi = 0,
  sigma_psi = 4,
  mu_omega = 0,
  shp_sigma2_z = 0.01,
  scl_sigma2_z = 0.01,
  spatial = 0,
  sp_model = c("car", "sparse", "icar"),
  nb_mat = NULL,
  shp_tau = 0.01,
  scl_tau = 0.01,
  W_n = 0,
  bp_degree = NULL,
  h1_gamma = 0,
  h2_gamma = 4
)
}
\arguments{
\item{formula}{An object of class \code{"formula"} (or coercible to one).
Defines the symbolic representation of the model to be fitted.}

\item{data}{A data frame containing all model variables, with the following elements:
\itemize{
\item \code{id}: A vector identifying individuals.
\item \code{status}: A vector indicating whether the event occurred (\code{1}) or was censored (\code{0}).
\item \code{stop}: A numeric vector representing the time until the event occurs.
\item \code{IndRec}: A binary indicator (\code{0/1}) for whether the individual has at least one recurrence.
\item \code{covar}: A vector or matrix of covariates.
}}

\item{baseline}{Character. Specifies the baseline intensity function:
\itemize{
\item \code{"plp"}: Parametric Power-Law Process (PLP).
\item \code{"bp"}: Semiparametric approach using Bernstein polynomials.
}}

\item{approach}{An integer specifying the estimation approach:
\itemize{
\item \code{mle}: Frequentist approach (available only for models \strong{without} random effects).
\item \code{bayes}: Bayesian approach.
}}

\item{n_iter}{An integer specifying the number of iterations for the MCMC algorithm. Default is \code{4000}.}

\item{n_cores}{An integer indicating the number of CPU cores to use for parallel computation. Default is \code{1} (no parallelization).}

\item{n_chains}{An integer defining the number of Markov chains to run in parallel. Default is \code{4}.}

\item{ZI}{A character string indicating whether the model accounts for zero-inflated data:
\itemize{
\item \code{"true"}: The model includes a structure for zero inflation.
\item \code{"false"}: The model does not consider zero inflation.
}}

\item{rnd_efc}{A character string indicating whether the model includes a random effects structure (frailty term):
\itemize{
\item \code{"true"}: Includes random effects (with frailty).
\item \code{"false"}: No random effects (no frailty).
}}

\item{initial}{A vector of initial parameter values for the optimization procedure.}

\item{shp_alpha1}{Shape parameter of the Gamma prior distribution for the scale parameter (\code{alpha_1})
when using the Power-Law Process (PLP) model. Default is \code{0.1}.}

\item{scl_alpha1}{Scale parameter of the Gamma prior distribution for the scale parameter (\code{alpha_1})
when using the PLP model. Default is \code{0.1}.}

\item{shp_alpha2}{Shape parameter of the Gamma prior distribution for the shape parameter (\code{alpha_2})
when using the PLP model. Default is \code{0.1}.}

\item{scl_alpha2}{Scale parameter of the Gamma prior distribution for the shape parameter (\code{alpha_2})
when using the PLP model. Default is \code{0.1}.}

\item{mu_beta}{Mean (\code{μ}) of the Normal prior distribution for the regression coefficients of the covariates. Default is \code{0}.}

\item{sigma_beta}{Standard deviation (\code{σ}) of the Normal prior distribution for the regression coefficients of the covariates. Default is \code{4}.}

\item{mu_omega}{Mean (\code{μ_omega}) of the Normal distribution for individual-level random effects (\code{omega})
in models without spatial random effects. Default is \code{0}.}

\item{shp_sigma2_z}{Shape parameter of the Gamma prior distribution for the hyperparameter \code{sigma2_z},
which controls the variance of the random effects. Default is \code{0.01}.}

\item{scl_sigma2_z}{Scale parameter of the Gamma prior distribution for the hyperparameter \code{sigma2_z}.
Default is \code{0.01}.}

\item{spatial}{A logical value indicating whether the model includes a spatial random effects structure:
\itemize{
\item \code{0}: No spatial random effects.
\item \code{1}: Includes spatial random effects.#'
If \code{spatial = TRUE}, then \code{rnd_efc} must necessarily be \code{FALSE}.
}}

\item{sp_model}{A character string specifying the spatial model to be used (only applicable if \code{spatial = TRUE}):
\itemize{
\item \code{"icar"}: Intrinsic Conditional Autoregressive (ICAR) model.
\item \code{"car"}: Conditional Autoregressive (CAR) model (under development).
\item \code{"sparse"}: Sparse spatial model (under development).
}}

\item{nb_mat}{A neighborhood matrix defining the spatial structure of the area units.
It is an object of class \code{sf}, typically representing adjacency relationships between spatial units.}

\item{shp_tau}{Shape parameter of the Gamma prior distribution for the precision (\code{tau}) of the spatial random effects.
Default is \code{0.01}.}

\item{scl_tau}{Scale parameter of the Gamma prior distribution for the precision (\code{tau}) of the spatial random effects.
Default is \code{0.01}.}

\item{W_n}{An integer specifying the number of edges (connections) in the sparse neighborhood matrix.
It represents the number of area pairs that share a spatial connection, as defined in \code{W_sparse}.
This value can be computed as:
\itemize{
\item If \code{W} is a binary adjacency matrix: \code{W_n = sum(W) / 2}.
\item If \code{nb} is a neighborhood list (e.g., from \code{spdep::poly2nb()}): \code{W_n = sum(sapply(nb, length)) / 2}.
\item If \code{W_sparse} is a list of connected area pairs: \code{W_n = nrow(W_sparse)}.
}}

\item{bp_degree}{An integer specifying the degree of the Bernstein polynomials used in the semiparametric
baseline intensity function. Default is \code{NULL}, meaning it is automatically selected.
This argument is only used when \code{baseline = "bp"}.}

\item{h1_gamma}{A numeric value specifying the mean of the lognormal prior distribution
for the coefficients of the Bernstein polynomials. Default is \code{0}.
This argument is only used when \code{baseline = "bp"}.}

\item{h2_gamma}{A numeric value specifying the variance of the lognormal prior distribution
for the coefficients of the Bernstein polynomials. Default is \code{4}.
This argument is only used when \code{baseline = "bp"}.}
}
\value{
A list containing the estimated parameters and model fit statistics.
}
\description{
The \code{fit_spnhppzi} function estimates parameters for \strong{recurrent event data with zero inflation and spatial correlation},
using either a frequentist or Bayesian approach.
}
\examples{
# EXAMPLE 01 ----
# This example illustrates the simplest case: the NHPP model for recurrent event data

N <- 500
alpha1_r <- 0.5
alpha2_r <- 1.3
beta1_r <- 0.6
beta2_r <- 0.8
pi_r <- 0
fu.min <- 7
fu.max <- 7

set.seed(5832)
cov.fu <- gencovfu(N = N,
                    fu.min = fu.min,
                    fu.max = fu.max,
                    cens.prob = 0,
                    dist.x = c("binomial", "normal"),
                    par.x = list(0.7, c(0, 1)),
                    beta.x = c(beta1_r, beta2_r))
set.seed(NULL)

base <- spsimrec(N = cov.fu$N,
                 cov_rec = c("ID", "X1", "X2"),
                 beta_x_rec = c(beta1_r, beta2_r),
                 logist = 0,
                 x1 = cov.fu$x1,
                 fu = cov.fu$fu,
                 fu_max = cov.fu$fu.max,
                 fu_min = cov.fu$fu.min,
                 spatial = 0,
                 random_ef = 0,
                 pi = pi_r,
                 par_z = 0,
                 dist_int_func = "weibull",
                 par_int_func = c(alpha1_r, alpha2_r),
                 baseline = "plp")

formula2 <- as.list(Formula(spnhppzi::Recur(time = end, event = status, id = ID, SP_ID = NULL, IndRec = IndRec) ~ X1 + X2 | -1))

RESULT_BAYES_SCOV1 <- spnhppzi::fit_spnhppzi(formula2,
                                         base,
                                         baseline = "plp",
                                         rnd_efc = FALSE,
                                         ZI = FALSE,
                                         approach = "BAYES",
                                         sp_model = "ICAR",
                                         initial = 1,
                                         shp_alpha1 = 0.1, scl_alpha1 = 0.1,
                                         shp_alpha2 = 0.1, scl_alpha2 = 0.1,
                                         mu_beta = 0, sigma_beta = 4,
                                         mu_psi = 0, sigma_psi = 4,
                                         mu_omega = 0,
                                         spatial = 0,
                                         n_iter = 2000,
                                         n_cores = 2,
                                         n_chains = 2)

summary(RESULT_BAYES_SCOV1, pars = c("alpha", "beta"))

# EXAMPLE 02 ----
# This example illustrates the SZI-NHPP-SE model (Semiparametric Zero-Inflated Non-Homogeneous Poisson Process with Spatial Effects)

# Load adjacency matrix from package's extdata directory
Adj_matrix <- readRDS(system.file("extdata", "Adj_matrix.RDS", package = "spnhppzi"))
list_area_RMBH<-as.numeric(row.names(Adj_matrix))
# Define parameters
N <- 500
alpha1_r <- 2
alpha2_r <- 1.3
beta1_r <- 0.6
beta2_r <- 0.8
sp_tau_r <- 1
psi1_r <- 1.6
psi2_r <- 1.2
pi_r <- 0.75
fu.min <- 7
fu.max <- 7
degree_bp <- min(ceiling(N^0.4), 5)

# Simulating covariates for the dataset
cov.fu <- gencovfu(
  N = N,
  fu.min = fu.min,
  fu.max = fu.max,
  cens.prob = 0,
  dist.x = c("binomial", "normal"),
  par.x = list(0.7, c(0, 1)),
  beta.x = c(beta1_r, beta2_r)
)

# Simulating recurrent event data for model estimation
base_sp <- spsimrec(
  N = cov.fu$N,
  cov_rec = c("ID", "X1", "X2"),
  beta_x_rec = c(beta1_r, beta2_r),
  logist = 0,
  x1 = cov.fu$x1,
  fu = cov.fu$fu,
  fu_max = cov.fu$fu.max,
  fu_min = cov.fu$fu.min,
  spatial = 1,
  list_area = list_area_RMBH,
  sp_model = "ICAR",
  SP_N = 133,
  nb_mat = Adj_matrix,
  sp_tau = sp_tau_r,
  random_ef = 1,
  pi = pi_r,
  par_z = 0,
  dist_int_func = "weibull",
  par_int_func = c(alpha1_r, alpha2_r),
  baseline = "plp"
)

# Fitting the SZI-NHPP-SE model
formula2 <- as.list(Formula(spnhppzi::Recur(end, status, ID, SP_ID, IndRec) ~ X1 + X2 | -1))

RESULT <- spnhppzi::fit_spnhppzi(
  formula2,
  base_sp,
  baseline = "bp",
  rnd_efc = TRUE,
  ZI = TRUE,
  approach = "BAYES",
  sp_model = "ICAR",
  initial = 1,
  mu_beta = 0, sigma_beta = 4,
  mu_psi = 0, sigma_psi = 4,
  mu_omega = 0,
  spatial = 1,
  nb_mat = Adj_matrix,
  shp_tau = 0.01,
  scl_tau = 0.01,
  n_iter = 2000,
  n_cores = 1,
  n_chains = 2,
  W_n = 365,
  bp_degree = degree_bp,
  h1_gamma = 0,
  h2_gamma = 4
)

summary(RESULT$result_stan, pars = c("alpha", "beta", "pii", "tau"))#'

#Example 03: ZI-NHPP-SE Model (Real Data Application) ----
#This example applies the Zero-Inflated Non-Homogeneous Poisson Process with Spatial Effects (SZI-NHPP-SE) model to real criminal recidivism data, as presented in the application section of the paper accepted in JRSS-A.
#The model includes spatially structured random effects and handles excess zeros. The covariate sex was used to assess differences in recidivism patterns.

# Load the bodily_injury dataset from the package's extdata directory
df_bodily_injury <- readRDS(system.file("extdata", "df_bodily_injury.RDS", package = "spnhppzi"))

# Load adjacency matrix from package's extdata directory
Adj_matrix_aplication <- readRDS(system.file("extdata", "Adj_matrix_aplication.RDS", package = "spnhppzi"))

# Fitting the SZI-NHPP-SE model
formula2=as.list(Formula(spnhppzi::Recur(time=end,event=as.numeric(status),id=id1,SP_ID=SP_ID,IndRec=IndRec)~sexo1|-1))
RESULT_BAYES_SCOV1<- spnhppzi::fit_spnhppzi(formula2,
                                           df_bodily_injury,
                                           baseline = "plp",
                                           rnd_efc = "TRUE",
                                           ZI="TRUE",
                                           approach = "BAYES",
                                           sp_model = "ICAR",
                                           initial=1,
                                           shp_alpha1=0.1,scl_alpha1=0.1,
                                           shp_alpha2=0.1,scl_alpha2=0.1,
                                           mu_beta=0,sigma_beta=4,
                                           mu_psi=0,sigma_psi=4,
                                           mu_omega=0,
                                           spatial=1,
                                           nb_mat=Adj_matrix_aplication,
                                           shp_tau=0.01,
                                           scl_tau=0.01,
                                           n_iter = 2000,
                                           n_cores=1,
                                           n_chains=2,
                                           W_n=365
)
RESULT_BAYES_SCOV1_sp_plp<-RESULT_BAYES_SCOV1
pars_desc_sp_plp<-summary(RESULT_BAYES_SCOV1_sp_plp, pars = c("alpha","beta","pii","tau"))
pars_desc_sp_plp$summary
}
